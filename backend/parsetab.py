
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftUNOTleftEQNOTDBEQleftLTGTGTEQLTEQleftPLUSMINUSCOMMAleftMULTDIVMODleftLPARENRPARENleftPOWrightUMINUSAND ANY BOOLEAN BREAK COLON COMMA CONSOLE CONTINUE DBMINUS DBPLUS DIV DOT ELSE EQ FALSE FOR FUNCTION GT GTEQ ID IF INTERFACE LBRACE LBRACKET LET LOG LPAREN LT LTEQ MINUS MOD MULT NOT NOTDBEQ NULL NUMBER NUM_CONST OF OR PLUS POW RBRACE RBRACKET RETURN RPAREN SEMI STRING STR_CONST TREQ TRUE WHILEprogram : instructionsinstructions : instructions instructioninstructions : instructioninstruction : print SEMI\n                    | declaration SEMI\n                    | assignment SEMI\n                    | start_if SEMItype : NUMBER\n            | BOOLEAN\n            | STRING\n            | ANY\n            | NUMBER LBRACE RBRACE\n            | BOOLEAN LBRACE RBRACE\n            | STRING LBRACE RBRACE\n            | ANY LBRACE RBRACE\n            assignment : LET ID COLON type EQ expressionassignment : LET ID EQ expressiondeclaration : LET ID COLON typedeclaration : LET IDprint : CONSOLE DOT LOG LPAREN expression RPARENstart_if : IF ifif : LPAREN expression RPAREN LBRACE instructions RBRACEif : LPAREN expression RPAREN LBRACE instructions RBRACE ELSE LBRACE instructions RBRACEif : LPAREN expression RPAREN LBRACE instructions RBRACE ELSE IF ifexpression : ID DBPLUS\n                | ID DBMINUSexpression : LPAREN expression RPARENexpression : expression MULT expression\n                    | expression PLUS expression\n                    | expression DIV expression\n                    | expression MINUS expression\n                    | expression EQ expression\n                    | expression TREQ expression\n                    | expression LT expression\n                    | expression GT expression\n                    | expression LTEQ expression\n                    | expression GTEQ expression\n                    | expression OR expression\n                    | expression AND expression\n                    | expression MOD expression\n                    | expression POW expression\n                    expresion : MINUS expression %prec UMINUS\n                | NOT expression %prec UNOTexpression : NUM_CONSTexpression : STR_CONSTexpression : TRUEexpression : FALSEexpression : ID'
    
_lr_action_items = {'CONSOLE':([0,2,3,11,12,13,14,15,62,83,86,88,],[8,8,-3,-2,-4,-5,-6,-7,8,8,8,8,]),'LET':([0,2,3,11,12,13,14,15,62,83,86,88,],[9,9,-3,-2,-4,-5,-6,-7,9,9,9,9,]),'IF':([0,2,3,11,12,13,14,15,62,83,85,86,88,],[10,10,-3,-2,-4,-5,-6,-7,10,10,87,10,10,]),'$end':([1,2,3,11,12,13,14,15,],[0,-1,-3,-2,-4,-5,-6,-7,]),'RBRACE':([3,11,12,13,14,15,57,58,59,60,83,88,],[-3,-2,-4,-5,-6,-7,79,80,81,82,84,90,]),'SEMI':([4,5,6,7,17,18,25,26,27,28,29,31,32,33,34,35,36,53,54,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,89,90,],[12,13,14,15,-19,-21,-48,-44,-45,-46,-47,-18,-8,-9,-10,-11,-17,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-20,-16,-12,-13,-14,-15,-22,-24,-23,]),'DOT':([8,],[16,]),'ID':([9,19,22,23,30,39,40,41,42,43,44,45,46,47,48,49,50,51,52,56,],[17,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'LPAREN':([10,19,20,22,23,30,39,40,41,42,43,44,45,46,47,48,49,50,51,52,56,87,],[19,23,30,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,19,]),'LOG':([16,],[20,]),'COLON':([17,],[21,]),'EQ':([17,24,25,26,27,28,29,31,32,33,34,35,36,37,53,54,55,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,82,],[22,43,-48,-44,-45,-46,-47,56,-8,-9,-10,-11,43,43,-25,-26,43,-27,-28,-29,-30,-31,-32,43,-34,-35,-36,-37,43,43,-40,-41,43,-12,-13,-14,-15,]),'NUM_CONST':([19,22,23,30,39,40,41,42,43,44,45,46,47,48,49,50,51,52,56,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'STR_CONST':([19,22,23,30,39,40,41,42,43,44,45,46,47,48,49,50,51,52,56,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'TRUE':([19,22,23,30,39,40,41,42,43,44,45,46,47,48,49,50,51,52,56,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'FALSE':([19,22,23,30,39,40,41,42,43,44,45,46,47,48,49,50,51,52,56,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'NUMBER':([21,],[32,]),'BOOLEAN':([21,],[33,]),'STRING':([21,],[34,]),'ANY':([21,],[35,]),'RPAREN':([24,25,26,27,28,29,37,53,54,55,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,],[38,-48,-44,-45,-46,-47,61,-25,-26,77,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,]),'MULT':([24,25,26,27,28,29,36,37,53,54,55,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,],[39,-48,-44,-45,-46,-47,39,39,-25,-26,39,-27,-28,39,-30,39,39,39,39,39,39,39,39,39,-40,-41,39,]),'PLUS':([24,25,26,27,28,29,36,37,53,54,55,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,],[40,-48,-44,-45,-46,-47,40,40,-25,-26,40,-27,-28,-29,-30,-31,40,40,40,40,40,40,40,40,-40,-41,40,]),'DIV':([24,25,26,27,28,29,36,37,53,54,55,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,],[41,-48,-44,-45,-46,-47,41,41,-25,-26,41,-27,-28,41,-30,41,41,41,41,41,41,41,41,41,-40,-41,41,]),'MINUS':([24,25,26,27,28,29,36,37,53,54,55,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,],[42,-48,-44,-45,-46,-47,42,42,-25,-26,42,-27,-28,-29,-30,-31,42,42,42,42,42,42,42,42,-40,-41,42,]),'TREQ':([24,25,26,27,28,29,36,37,53,54,55,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,],[44,-48,-44,-45,-46,-47,44,44,-25,-26,44,-27,-28,-29,-30,-31,-32,44,-34,-35,-36,-37,-38,-39,-40,-41,44,]),'LT':([24,25,26,27,28,29,36,37,53,54,55,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,],[45,-48,-44,-45,-46,-47,45,45,-25,-26,45,-27,-28,-29,-30,-31,45,45,-34,-35,-36,-37,45,45,-40,-41,45,]),'GT':([24,25,26,27,28,29,36,37,53,54,55,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,],[46,-48,-44,-45,-46,-47,46,46,-25,-26,46,-27,-28,-29,-30,-31,46,46,-34,-35,-36,-37,46,46,-40,-41,46,]),'LTEQ':([24,25,26,27,28,29,36,37,53,54,55,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,],[47,-48,-44,-45,-46,-47,47,47,-25,-26,47,-27,-28,-29,-30,-31,47,47,-34,-35,-36,-37,47,47,-40,-41,47,]),'GTEQ':([24,25,26,27,28,29,36,37,53,54,55,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,],[48,-48,-44,-45,-46,-47,48,48,-25,-26,48,-27,-28,-29,-30,-31,48,48,-34,-35,-36,-37,48,48,-40,-41,48,]),'OR':([24,25,26,27,28,29,36,37,53,54,55,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,],[49,-48,-44,-45,-46,-47,49,49,-25,-26,49,-27,-28,-29,-30,-31,-32,49,-34,-35,-36,-37,-38,-39,-40,-41,49,]),'AND':([24,25,26,27,28,29,36,37,53,54,55,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,],[50,-48,-44,-45,-46,-47,50,50,-25,-26,50,-27,-28,-29,-30,-31,-32,50,-34,-35,-36,-37,50,-39,-40,-41,50,]),'MOD':([24,25,26,27,28,29,36,37,53,54,55,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,],[51,-48,-44,-45,-46,-47,51,51,-25,-26,51,-27,-28,51,-30,51,51,51,51,51,51,51,51,51,-40,-41,51,]),'POW':([24,25,26,27,28,29,36,37,53,54,55,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,],[52,-48,-44,-45,-46,-47,52,52,-25,-26,52,-27,52,52,52,52,52,52,52,52,52,52,52,52,52,-41,52,]),'DBPLUS':([25,],[53,]),'DBMINUS':([25,],[54,]),'LBRACE':([32,33,34,35,38,85,],[57,58,59,60,62,86,]),'ELSE':([84,],[85,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([0,62,86,],[2,83,88,]),'instruction':([0,2,62,83,86,88,],[3,11,3,11,3,11,]),'print':([0,2,62,83,86,88,],[4,4,4,4,4,4,]),'declaration':([0,2,62,83,86,88,],[5,5,5,5,5,5,]),'assignment':([0,2,62,83,86,88,],[6,6,6,6,6,6,]),'start_if':([0,2,62,83,86,88,],[7,7,7,7,7,7,]),'if':([10,87,],[18,89,]),'expression':([19,22,23,30,39,40,41,42,43,44,45,46,47,48,49,50,51,52,56,],[24,36,37,55,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,]),'type':([21,],[31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','Parser.py',29),
  ('instructions -> instructions instruction','instructions',2,'p_instructions_list','Parser.py',37),
  ('instructions -> instruction','instructions',1,'p_instruction_only','Parser.py',45),
  ('instruction -> print SEMI','instruction',2,'p_instruccion','Parser.py',57),
  ('instruction -> declaration SEMI','instruction',2,'p_instruccion','Parser.py',58),
  ('instruction -> assignment SEMI','instruction',2,'p_instruccion','Parser.py',59),
  ('instruction -> start_if SEMI','instruction',2,'p_instruccion','Parser.py',60),
  ('type -> NUMBER','type',1,'p_type','Parser.py',67),
  ('type -> BOOLEAN','type',1,'p_type','Parser.py',68),
  ('type -> STRING','type',1,'p_type','Parser.py',69),
  ('type -> ANY','type',1,'p_type','Parser.py',70),
  ('type -> NUMBER LBRACE RBRACE','type',3,'p_type','Parser.py',71),
  ('type -> BOOLEAN LBRACE RBRACE','type',3,'p_type','Parser.py',72),
  ('type -> STRING LBRACE RBRACE','type',3,'p_type','Parser.py',73),
  ('type -> ANY LBRACE RBRACE','type',3,'p_type','Parser.py',74),
  ('assignment -> LET ID COLON type EQ expression','assignment',6,'p_assignment_type','Parser.py',84),
  ('assignment -> LET ID EQ expression','assignment',4,'p_assignment_notype','Parser.py',92),
  ('declaration -> LET ID COLON type','declaration',4,'p_declaration_type','Parser.py',100),
  ('declaration -> LET ID','declaration',2,'p_declaration_notype','Parser.py',106),
  ('print -> CONSOLE DOT LOG LPAREN expression RPAREN','print',6,'p_print','Parser.py',112),
  ('start_if -> IF if','start_if',2,'p_start_if','Parser.py',119),
  ('if -> LPAREN expression RPAREN LBRACE instructions RBRACE','if',6,'p_if','Parser.py',125),
  ('if -> LPAREN expression RPAREN LBRACE instructions RBRACE ELSE LBRACE instructions RBRACE','if',10,'p_if_else','Parser.py',129),
  ('if -> LPAREN expression RPAREN LBRACE instructions RBRACE ELSE IF if','if',9,'p_if_else_if','Parser.py',133),
  ('expression -> ID DBPLUS','expression',2,'p_expression_dec_inc','Parser.py',139),
  ('expression -> ID DBMINUS','expression',2,'p_expression_dec_inc','Parser.py',140),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','Parser.py',148),
  ('expression -> expression MULT expression','expression',3,'p_expression_operation','Parser.py',153),
  ('expression -> expression PLUS expression','expression',3,'p_expression_operation','Parser.py',154),
  ('expression -> expression DIV expression','expression',3,'p_expression_operation','Parser.py',155),
  ('expression -> expression MINUS expression','expression',3,'p_expression_operation','Parser.py',156),
  ('expression -> expression EQ expression','expression',3,'p_expression_operation','Parser.py',157),
  ('expression -> expression TREQ expression','expression',3,'p_expression_operation','Parser.py',158),
  ('expression -> expression LT expression','expression',3,'p_expression_operation','Parser.py',159),
  ('expression -> expression GT expression','expression',3,'p_expression_operation','Parser.py',160),
  ('expression -> expression LTEQ expression','expression',3,'p_expression_operation','Parser.py',161),
  ('expression -> expression GTEQ expression','expression',3,'p_expression_operation','Parser.py',162),
  ('expression -> expression OR expression','expression',3,'p_expression_operation','Parser.py',163),
  ('expression -> expression AND expression','expression',3,'p_expression_operation','Parser.py',164),
  ('expression -> expression MOD expression','expression',3,'p_expression_operation','Parser.py',165),
  ('expression -> expression POW expression','expression',3,'p_expression_operation','Parser.py',166),
  ('expresion -> MINUS expression','expresion',2,'p_expresion_unaria','Parser.py',175),
  ('expresion -> NOT expression','expresion',2,'p_expresion_unaria','Parser.py',176),
  ('expression -> NUM_CONST','expression',1,'p_expression_number','Parser.py',186),
  ('expression -> STR_CONST','expression',1,'p_expression_string','Parser.py',191),
  ('expression -> TRUE','expression',1,'p_expression_boolean_true','Parser.py',195),
  ('expression -> FALSE','expression',1,'p_expression_boolean_false','Parser.py',200),
  ('expression -> ID','expression',1,'p_expression_id','Parser.py',205),
]
